#!/usr/bin/env bash
#
# Summary: Refresh default packages on all installed node versions
#
# Usage: nodenv default-packages install [ --all | <version>...]
#
# Install default packages on a specific version or all installed versions.

set -e
[ -n "$NODENV_DEBUG" ] && set -x

# Provide nodenv completions
if [ "$1" = --complete ]; then
  echo install
  echo list
  echo --all
  exit
fi

versions() {
  case "$1" in
    "")    nodenv-version-name                   ;; # list active version
    --all) nodenv-versions --skip-aliases --bare ;; # list all installed versions
    *)     echo "$@"                             ;; # list specified versions
  esac
}

for_versions() {
  cmd="$1"
  shift

  for v in $(versions "$@"); do
    eval "$cmd" "$(nodenv-prefix "$v")"
  done
}

list_default_packages() {
  [ -r "${NODENV_ROOT}/default-packages" ] || return 0

  local line package_name package_version

  # Read package names and versions from $NODENV_ROOT/default-packages.
  while IFS=" " read -ra line; do

    # Skip empty lines.
    [ "${#line[@]}" -gt 0 ] || continue

    # Skip comment lines that begin with `#`.
    [ "${line[0]:0:1}" != "#" ] || continue

    package_name="${line[0]}"
    package_version="${line[*]:1}"

    echo "${package_name}${package_version:+@$package_version}"

  done < "${NODENV_ROOT}/default-packages"
}

install_default_packages() {
  local package

  list_default_packages | while read -r package; do
    # Invoke `npm install -g` in the just-installed Node.
    NODENV_VERSION="$VERSION_NAME" nodenv-exec npm install -g "$package" || {
      echo "nodenv: error installing package \`$package'"
    } >&2
  done
}

unset cmd

case "$1" in
  install | list ) cmd="$1"; shift ;;

  *) nodenv-help --usage default-packages; exit 1 ;;
esac

for_versions "${cmd}_default_packages" "$@"
